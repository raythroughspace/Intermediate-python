# Python Class 3478# Lesson 6 Problem 5# Author: RayThroughSpace (328031)import random### Die class that we previously wrote ###class Die:    '''Die class'''    def __init__(self,sides=6):        '''Die(sides)        creates a new Die object        int sides is the number of sides        (default is 6)        -or- sides is a list/tuple of sides'''        # if an integer, create a die with sides        #  from 1 to sides        if isinstance(sides,int):            self.numSides = sides            self.sides = list(range(1,sides+1))        else:  # use the list/tuple provided             self.numSides = len(sides)            self.sides = list(sides)        # roll the die to get a random side on top to start        self.roll()    def __str__(self):        '''str(Die) -> str        string representation of Die'''        return 'A '+str(self.numSides)+'-sided die with '+\               str(self.get_top())+' on top'    def roll(self):        '''Die.roll()        rolls the die'''        # pick a random side and put it on top        self.top = self.sides[random.randrange(self.numSides)]    def get_top(self):        '''Die.get_top() -> object        returns top of Die'''        return self.top    def set_top(self,value):        '''Die.set_top(value)        sets the top of the Die to value        Does nothing if value is illegal'''        if value in self.sides:            self.top = value### end Die class ###class DinoDie(Die):    '''implements one die for Dino Hunt'''    def __init__(self, color):        """DinoDie(color)         creates a DinoDie of color"""        self.color = color        if (color == "green"):            dino, leaf, foot = 3,2,1        elif (color == "yellow"):            dino, leaf, foot = 2,2,2         elif (color == "red"):            dino, leaf, foot = 1,2,3        sides = ["dinosaur" for i in range(dino)] + ["leaf" for i in range(leaf)] + ["foot" for i in range(foot)]         Die.__init__(self, sides)            def __str__(self):        """str(DinoDie) -> str        returns a string representation of DinoDie"""        top = Die.get_top(self)        return "A " + self.color + " Dino die with a " + top + " on top."        def get_color(self):        """DinoDie.get_color() -> str        returns color of this die"""        return self.colorclass DinoPlayer:    '''implements a player of Dino Hunt'''    def __init__(self, name):        """DinoPlayer(name)         creates a new player with name"""        self.name = name        self.setAside = [] #dice that are set aside        self.score = 0            def __str__(self):        """str(DinoPlayer) -> str        returns a string representation of DinoPlayer"""        return self.name + " has " + str(self.score) + " points."        def get_score(self):        """DinoPlayer.get_score() -> int        returns score of this player"""        return self.score            def get_name(self):        """DinoPlayer.get_score() -> str        returns name of player"""        return self.name        def reset_dice(self, pile):        """DinoPlayer.return_dice(pile) -> None        removes all dice that were set aside during turn and returns them to pile"""        pile.return_dice(self.setAside)        self.setAside = []            def roll_dice(self, dice, pile):        """DinoPlayer.roll_dice(dice) -> tuple        simulates a dice roll and returns number of feet and dinosaurs"""        nfeet = 0        ndino = 0        for die in dice:            die.roll()            print(die)            if (die.get_top() == "foot"):                nfeet +=1                self.setAside.append(die)            elif (die.get_top() == "dinosaur"):                ndino +=1                self.setAside.append(die)            else:                pile.return_dice([die])        return nfeet, ndino        def play_turn(self, pile):        """DinoPlayer.play_turn(pile) -> None        play a turn of Dino Hunt Dice"""        print(self.name + ", it's your turn!")        print("You have "+ str(pile.n_dice()) + " dice remaining.")        print(pile)        nfeet = 0        ndino = 0        while True:            input("Press enter to select dice and roll.")            dice = pile.deal_dice()            feet, dino = self.roll_dice(dice, pile)            ndino += dino            nfeet += feet            print("This turn so far: " + str(ndino) + " dinos and " + str(nfeet) + " feet")            if (nfeet >= 3):                print("Too bad -- you got stomped!")                self.reset_dice(pile)                return            print("You have "+ str(pile.n_dice()) + " dice remaining.")            print(pile)            if (pile.n_dice() == 0):                print("No more dice to roll, end of your turn!")                break            response = 'x'            while (response not in ['y', 'n']):                response = input("Do you want to roll again? (y/n) ")            if (response == 'n'):                break        self.score += ndino        self.reset_dice(pile)class DinoDiePile():        def __init__(self):        """DinoDiePile()         creates a pile with 13 dino dice"""        self.pile = []        for i in range(6):            self.pile.append(DinoDie("green"))        for i in range(4):            self.pile.append(DinoDie("yellow"))        for i in range(3):            self.pile.append(DinoDie("red"))        def __str__(self):        """str(DinoDiePile) -> str        returns a string representation of this pile"""        green, yellow, red = 0,0,0        for die in self.pile:            if (die.get_color() == "green"):                green+=1            elif (die.get_color() == "yellow"):                yellow +=1            else:                red += 1        return str(green) + " green, " + str(yellow) + " yellow, " + str(red) + " red"        def deal_dice(self):        """DinoDiePile.deal_dice() -> list        returns a list of 3 randomly selected dice from this pile"""        random.shuffle(self.pile)        deal = []        for i in range(min(self.n_dice(), 3)):            deal.append(self.pile[i])        for die in deal:            self.pile.remove(die)        return deal        def return_dice(self, dice):        """DinoDiePile.return_dice(dice) -> None        places dice back into the pile"""        for die in dice:            self.pile.append(die)                def n_dice(self):        """DinoDiePile.n_dice() -> int        returns the number of dice in this pile"""        return len(self.pile)def display_scores(playerList):    """display_scores(playerList) -> None    prints out scores of all players"""    for player in playerList:        print(player)        def play_dino_hunt(numPlayers,numRounds):    '''play_dino_hunt(numPlayer,numRounds)    plays a game of Dino Hunt      numPlayers is the number of players      numRounds is the number of turns per player'''    playerList = []    for i in range(numPlayers):        name = str(input("Player " + str(i+1) + ", enter your name: "))        playerList.append(DinoPlayer(name))        pile = DinoDiePile()        for n in range(numRounds):        print("Round " + str(n+1))        display_scores(playerList)                for turn in range(numPlayers):            playerList[turn].play_turn(pile)            turn = (turn+1)%numPlayers            print("\n")        winner = []    max_score = 0    for i in range(numPlayers):        if (playerList[i].get_score() > max_score):            winner = [playerList[i]]            max_score = playerList[i].get_score()        elif (playerList[i].get_score() == max_score):            winner.append(playerList[i])        print("The winners are: " )    for player in winner:        print(player.get_name())                        play_dino_hunt(2, 4)